using Domain.Common.Constants;
using Domain.UserAggregate;
using Domain.UserAggregate.ValueObjects;
using Infrastructure.Persistence.Constants;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using SharedKernel.ValueObjects;

namespace Infrastructure.Persistence.Configurations;

/// <summary>
/// Configuration for the "User" entity in the database context.
/// </summary>
internal sealed class UserConfigurations : IEntityTypeConfiguration<User>
{
    /// <summary>
    /// Configures the "User" entity, including table name, key, and property settings.
    /// </summary>
    /// <param name="builder">The entity type builder for the "User" entity.</param>
    public void Configure(EntityTypeBuilder<User> builder)
    {
        // Set the table name for the "User" entity.
        builder.ToTable(TableNames.Users);

        // Define the primary key for the "User" entity.
        builder.HasKey(u => u.Id);

        // Configure the property representing the unique identifier.
        builder.Property(u => u.Id)
            .ValueGeneratedNever() // Value is not generated by the database.
            .HasConversion(
                id => id.Value, // Convert UserId to its underlying value.
                value => new UserId(value)); // Create UserId from its underlying value.

        // Configure the "Email" property.
        builder.Property(u => u.Email)
            .HasConversion(
                email => email.Value, // Convert Email to its underlying value.
                value => new Email(value)) // Create Email from its underlying value.
            .HasMaxLength(Email.MaxEmailLength);

        // Configure the "PhoneNumber" property.
        builder.Property(u => u.PhoneNumber)
            .HasConversion(
                phone => phone.Value, // Convert PhoneNumber to its underlying value.
                value => new PhoneNumber(value)) // Create PhoneNumber from its underlying value.
            .HasMaxLength(PhoneNumber.MaxPhoneNumberLength);

        // Configure the "FirstName" property with a maximum length, which may vary.
        builder.Property(u => u.FirstName)
            .HasMaxLength(EntityConstants.MaxNameLength);

        // Configure the "LastName" property with a maximum length, which may vary.
        builder.Property(u => u.LastName)
            .HasMaxLength(EntityConstants.MaxNameLength);

        // Add an index on the "Email" property for efficient querying.
        builder.HasIndex(u => u.Email).IsUnique();
    }
}
